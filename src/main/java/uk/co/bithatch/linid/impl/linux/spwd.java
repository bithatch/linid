/*
 * Copyright © 2025 Bithatch (tanktarta@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the “Software”), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct spwd {
 *     char *sp_namp;
 *     char *sp_pwdp;
 *     long sp_lstchg;
 *     long sp_min;
 *     long sp_max;
 *     long sp_warn;
 *     long sp_inact;
 *     long sp_expire;
 *     unsigned long sp_flag;
 * }
 * }
 */
public class spwd {

    spwd() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_POINTER.withName("sp_namp"),
        nss_proto_h.C_POINTER.withName("sp_pwdp"),
        nss_proto_h.C_LONG.withName("sp_lstchg"),
        nss_proto_h.C_LONG.withName("sp_min"),
        nss_proto_h.C_LONG.withName("sp_max"),
        nss_proto_h.C_LONG.withName("sp_warn"),
        nss_proto_h.C_LONG.withName("sp_inact"),
        nss_proto_h.C_LONG.withName("sp_expire"),
        nss_proto_h.C_LONG.withName("sp_flag")
    ).withName("spwd");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout sp_namp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sp_namp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *sp_namp
     * }
     */
    public static final AddressLayout sp_namp$layout() {
        return sp_namp$LAYOUT;
    }

    private static final long sp_namp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *sp_namp
     * }
     */
    public static final long sp_namp$offset() {
        return sp_namp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *sp_namp
     * }
     */
    public static MemorySegment sp_namp(MemorySegment struct) {
        return struct.get(sp_namp$LAYOUT, sp_namp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *sp_namp
     * }
     */
    public static void sp_namp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sp_namp$LAYOUT, sp_namp$OFFSET, fieldValue);
    }

    private static final AddressLayout sp_pwdp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sp_pwdp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *sp_pwdp
     * }
     */
    public static final AddressLayout sp_pwdp$layout() {
        return sp_pwdp$LAYOUT;
    }

    private static final long sp_pwdp$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *sp_pwdp
     * }
     */
    public static final long sp_pwdp$offset() {
        return sp_pwdp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *sp_pwdp
     * }
     */
    public static MemorySegment sp_pwdp(MemorySegment struct) {
        return struct.get(sp_pwdp$LAYOUT, sp_pwdp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *sp_pwdp
     * }
     */
    public static void sp_pwdp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sp_pwdp$LAYOUT, sp_pwdp$OFFSET, fieldValue);
    }

    private static final OfLong sp_lstchg$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_lstchg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long sp_lstchg
     * }
     */
    public static final OfLong sp_lstchg$layout() {
        return sp_lstchg$LAYOUT;
    }

    private static final long sp_lstchg$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long sp_lstchg
     * }
     */
    public static final long sp_lstchg$offset() {
        return sp_lstchg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long sp_lstchg
     * }
     */
    public static long sp_lstchg(MemorySegment struct) {
        return struct.get(sp_lstchg$LAYOUT, sp_lstchg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long sp_lstchg
     * }
     */
    public static void sp_lstchg(MemorySegment struct, long fieldValue) {
        struct.set(sp_lstchg$LAYOUT, sp_lstchg$OFFSET, fieldValue);
    }

    private static final OfLong sp_min$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long sp_min
     * }
     */
    public static final OfLong sp_min$layout() {
        return sp_min$LAYOUT;
    }

    private static final long sp_min$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long sp_min
     * }
     */
    public static final long sp_min$offset() {
        return sp_min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long sp_min
     * }
     */
    public static long sp_min(MemorySegment struct) {
        return struct.get(sp_min$LAYOUT, sp_min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long sp_min
     * }
     */
    public static void sp_min(MemorySegment struct, long fieldValue) {
        struct.set(sp_min$LAYOUT, sp_min$OFFSET, fieldValue);
    }

    private static final OfLong sp_max$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long sp_max
     * }
     */
    public static final OfLong sp_max$layout() {
        return sp_max$LAYOUT;
    }

    private static final long sp_max$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long sp_max
     * }
     */
    public static final long sp_max$offset() {
        return sp_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long sp_max
     * }
     */
    public static long sp_max(MemorySegment struct) {
        return struct.get(sp_max$LAYOUT, sp_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long sp_max
     * }
     */
    public static void sp_max(MemorySegment struct, long fieldValue) {
        struct.set(sp_max$LAYOUT, sp_max$OFFSET, fieldValue);
    }

    private static final OfLong sp_warn$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_warn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long sp_warn
     * }
     */
    public static final OfLong sp_warn$layout() {
        return sp_warn$LAYOUT;
    }

    private static final long sp_warn$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long sp_warn
     * }
     */
    public static final long sp_warn$offset() {
        return sp_warn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long sp_warn
     * }
     */
    public static long sp_warn(MemorySegment struct) {
        return struct.get(sp_warn$LAYOUT, sp_warn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long sp_warn
     * }
     */
    public static void sp_warn(MemorySegment struct, long fieldValue) {
        struct.set(sp_warn$LAYOUT, sp_warn$OFFSET, fieldValue);
    }

    private static final OfLong sp_inact$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_inact"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long sp_inact
     * }
     */
    public static final OfLong sp_inact$layout() {
        return sp_inact$LAYOUT;
    }

    private static final long sp_inact$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long sp_inact
     * }
     */
    public static final long sp_inact$offset() {
        return sp_inact$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long sp_inact
     * }
     */
    public static long sp_inact(MemorySegment struct) {
        return struct.get(sp_inact$LAYOUT, sp_inact$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long sp_inact
     * }
     */
    public static void sp_inact(MemorySegment struct, long fieldValue) {
        struct.set(sp_inact$LAYOUT, sp_inact$OFFSET, fieldValue);
    }

    private static final OfLong sp_expire$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_expire"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long sp_expire
     * }
     */
    public static final OfLong sp_expire$layout() {
        return sp_expire$LAYOUT;
    }

    private static final long sp_expire$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long sp_expire
     * }
     */
    public static final long sp_expire$offset() {
        return sp_expire$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long sp_expire
     * }
     */
    public static long sp_expire(MemorySegment struct) {
        return struct.get(sp_expire$LAYOUT, sp_expire$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long sp_expire
     * }
     */
    public static void sp_expire(MemorySegment struct, long fieldValue) {
        struct.set(sp_expire$LAYOUT, sp_expire$OFFSET, fieldValue);
    }

    private static final OfLong sp_flag$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sp_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long sp_flag
     * }
     */
    public static final OfLong sp_flag$layout() {
        return sp_flag$LAYOUT;
    }

    private static final long sp_flag$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long sp_flag
     * }
     */
    public static final long sp_flag$offset() {
        return sp_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long sp_flag
     * }
     */
    public static long sp_flag(MemorySegment struct) {
        return struct.get(sp_flag$LAYOUT, sp_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long sp_flag
     * }
     */
    public static void sp_flag(MemorySegment struct, long fieldValue) {
        struct.set(sp_flag$LAYOUT, sp_flag$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

