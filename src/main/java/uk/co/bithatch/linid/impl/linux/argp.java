// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct argp {
 *     const struct argp_option *options;
 *     argp_parser_t parser;
 *     const char *args_doc;
 *     const char *doc;
 *     const struct argp_child *children;
 *     char *(*help_filter)(int, const char *, void *);
 *     const char *argp_domain;
 * }
 * }
 */
public class argp {

    argp() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_POINTER.withName("options"),
        nss_proto_h.C_POINTER.withName("parser"),
        nss_proto_h.C_POINTER.withName("args_doc"),
        nss_proto_h.C_POINTER.withName("doc"),
        nss_proto_h.C_POINTER.withName("children"),
        nss_proto_h.C_POINTER.withName("help_filter"),
        nss_proto_h.C_POINTER.withName("argp_domain")
    ).withName("argp");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout options$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct argp_option *options
     * }
     */
    public static final AddressLayout options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct argp_option *options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct argp_option *options
     * }
     */
    public static MemorySegment options(MemorySegment struct) {
        return struct.get(options$LAYOUT, options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct argp_option *options
     * }
     */
    public static void options(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(options$LAYOUT, options$OFFSET, fieldValue);
    }

    private static final AddressLayout parser$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("parser"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * argp_parser_t parser
     * }
     */
    public static final AddressLayout parser$layout() {
        return parser$LAYOUT;
    }

    private static final long parser$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * argp_parser_t parser
     * }
     */
    public static final long parser$offset() {
        return parser$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * argp_parser_t parser
     * }
     */
    public static MemorySegment parser(MemorySegment struct) {
        return struct.get(parser$LAYOUT, parser$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * argp_parser_t parser
     * }
     */
    public static void parser(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(parser$LAYOUT, parser$OFFSET, fieldValue);
    }

    private static final AddressLayout args_doc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("args_doc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *args_doc
     * }
     */
    public static final AddressLayout args_doc$layout() {
        return args_doc$LAYOUT;
    }

    private static final long args_doc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *args_doc
     * }
     */
    public static final long args_doc$offset() {
        return args_doc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *args_doc
     * }
     */
    public static MemorySegment args_doc(MemorySegment struct) {
        return struct.get(args_doc$LAYOUT, args_doc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *args_doc
     * }
     */
    public static void args_doc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(args_doc$LAYOUT, args_doc$OFFSET, fieldValue);
    }

    private static final AddressLayout doc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("doc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static final AddressLayout doc$layout() {
        return doc$LAYOUT;
    }

    private static final long doc$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static final long doc$offset() {
        return doc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static MemorySegment doc(MemorySegment struct) {
        return struct.get(doc$LAYOUT, doc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *doc
     * }
     */
    public static void doc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(doc$LAYOUT, doc$OFFSET, fieldValue);
    }

    private static final AddressLayout children$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("children"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct argp_child *children
     * }
     */
    public static final AddressLayout children$layout() {
        return children$LAYOUT;
    }

    private static final long children$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct argp_child *children
     * }
     */
    public static final long children$offset() {
        return children$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct argp_child *children
     * }
     */
    public static MemorySegment children(MemorySegment struct) {
        return struct.get(children$LAYOUT, children$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct argp_child *children
     * }
     */
    public static void children(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(children$LAYOUT, children$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * char *(*help_filter)(int, const char *, void *)
     * }
     */
    public static class help_filter {

        help_filter() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            nss_proto_h.C_POINTER,
            nss_proto_h.C_INT,
            nss_proto_h.C_POINTER,
            nss_proto_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = nss_proto_h.upcallHandle(help_filter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(help_filter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,int _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout help_filter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("help_filter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *(*help_filter)(int, const char *, void *)
     * }
     */
    public static final AddressLayout help_filter$layout() {
        return help_filter$LAYOUT;
    }

    private static final long help_filter$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *(*help_filter)(int, const char *, void *)
     * }
     */
    public static final long help_filter$offset() {
        return help_filter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *(*help_filter)(int, const char *, void *)
     * }
     */
    public static MemorySegment help_filter(MemorySegment struct) {
        return struct.get(help_filter$LAYOUT, help_filter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *(*help_filter)(int, const char *, void *)
     * }
     */
    public static void help_filter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(help_filter$LAYOUT, help_filter$OFFSET, fieldValue);
    }

    private static final AddressLayout argp_domain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("argp_domain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *argp_domain
     * }
     */
    public static final AddressLayout argp_domain$layout() {
        return argp_domain$LAYOUT;
    }

    private static final long argp_domain$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *argp_domain
     * }
     */
    public static final long argp_domain$offset() {
        return argp_domain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *argp_domain
     * }
     */
    public static MemorySegment argp_domain(MemorySegment struct) {
        return struct.get(argp_domain$LAYOUT, argp_domain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *argp_domain
     * }
     */
    public static void argp_domain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(argp_domain$LAYOUT, argp_domain$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

