// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct aliasent {
 *     char *alias_name;
 *     size_t alias_members_len;
 *     char **alias_members;
 *     int alias_local;
 * }
 * }
 */
public class aliasent {

    aliasent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_POINTER.withName("alias_name"),
        nss_proto_h.C_LONG.withName("alias_members_len"),
        nss_proto_h.C_POINTER.withName("alias_members"),
        nss_proto_h.C_INT.withName("alias_local"),
        MemoryLayout.paddingLayout(4)
    ).withName("aliasent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout alias_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alias_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *alias_name
     * }
     */
    public static final AddressLayout alias_name$layout() {
        return alias_name$LAYOUT;
    }

    private static final long alias_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *alias_name
     * }
     */
    public static final long alias_name$offset() {
        return alias_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *alias_name
     * }
     */
    public static MemorySegment alias_name(MemorySegment struct) {
        return struct.get(alias_name$LAYOUT, alias_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *alias_name
     * }
     */
    public static void alias_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(alias_name$LAYOUT, alias_name$OFFSET, fieldValue);
    }

    private static final OfLong alias_members_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("alias_members_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t alias_members_len
     * }
     */
    public static final OfLong alias_members_len$layout() {
        return alias_members_len$LAYOUT;
    }

    private static final long alias_members_len$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t alias_members_len
     * }
     */
    public static final long alias_members_len$offset() {
        return alias_members_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t alias_members_len
     * }
     */
    public static long alias_members_len(MemorySegment struct) {
        return struct.get(alias_members_len$LAYOUT, alias_members_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t alias_members_len
     * }
     */
    public static void alias_members_len(MemorySegment struct, long fieldValue) {
        struct.set(alias_members_len$LAYOUT, alias_members_len$OFFSET, fieldValue);
    }

    private static final AddressLayout alias_members$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alias_members"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char **alias_members
     * }
     */
    public static final AddressLayout alias_members$layout() {
        return alias_members$LAYOUT;
    }

    private static final long alias_members$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char **alias_members
     * }
     */
    public static final long alias_members$offset() {
        return alias_members$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char **alias_members
     * }
     */
    public static MemorySegment alias_members(MemorySegment struct) {
        return struct.get(alias_members$LAYOUT, alias_members$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char **alias_members
     * }
     */
    public static void alias_members(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(alias_members$LAYOUT, alias_members$OFFSET, fieldValue);
    }

    private static final OfInt alias_local$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alias_local"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alias_local
     * }
     */
    public static final OfInt alias_local$layout() {
        return alias_local$LAYOUT;
    }

    private static final long alias_local$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alias_local
     * }
     */
    public static final long alias_local$offset() {
        return alias_local$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alias_local
     * }
     */
    public static int alias_local(MemorySegment struct) {
        return struct.get(alias_local$LAYOUT, alias_local$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alias_local
     * }
     */
    public static void alias_local(MemorySegment struct, int fieldValue) {
        struct.set(alias_local$LAYOUT, alias_local$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

