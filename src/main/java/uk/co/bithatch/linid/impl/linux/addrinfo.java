/*
 * Copyright © 2025 Bithatch (tanktarta@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the “Software”), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct addrinfo {
 *     int ai_flags;
 *     int ai_family;
 *     int ai_socktype;
 *     int ai_protocol;
 *     socklen_t ai_addrlen;
 *     struct sockaddr *ai_addr;
 *     char *ai_canonname;
 *     struct addrinfo *ai_next;
 * }
 * }
 */
public class addrinfo {

    addrinfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_INT.withName("ai_flags"),
        nss_proto_h.C_INT.withName("ai_family"),
        nss_proto_h.C_INT.withName("ai_socktype"),
        nss_proto_h.C_INT.withName("ai_protocol"),
        nss_proto_h.C_INT.withName("ai_addrlen"),
        MemoryLayout.paddingLayout(4),
        nss_proto_h.C_POINTER.withName("ai_addr"),
        nss_proto_h.C_POINTER.withName("ai_canonname"),
        nss_proto_h.C_POINTER.withName("ai_next")
    ).withName("addrinfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ai_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ai_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ai_flags
     * }
     */
    public static final OfInt ai_flags$layout() {
        return ai_flags$LAYOUT;
    }

    private static final long ai_flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ai_flags
     * }
     */
    public static final long ai_flags$offset() {
        return ai_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ai_flags
     * }
     */
    public static int ai_flags(MemorySegment struct) {
        return struct.get(ai_flags$LAYOUT, ai_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ai_flags
     * }
     */
    public static void ai_flags(MemorySegment struct, int fieldValue) {
        struct.set(ai_flags$LAYOUT, ai_flags$OFFSET, fieldValue);
    }

    private static final OfInt ai_family$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ai_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ai_family
     * }
     */
    public static final OfInt ai_family$layout() {
        return ai_family$LAYOUT;
    }

    private static final long ai_family$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ai_family
     * }
     */
    public static final long ai_family$offset() {
        return ai_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ai_family
     * }
     */
    public static int ai_family(MemorySegment struct) {
        return struct.get(ai_family$LAYOUT, ai_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ai_family
     * }
     */
    public static void ai_family(MemorySegment struct, int fieldValue) {
        struct.set(ai_family$LAYOUT, ai_family$OFFSET, fieldValue);
    }

    private static final OfInt ai_socktype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ai_socktype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ai_socktype
     * }
     */
    public static final OfInt ai_socktype$layout() {
        return ai_socktype$LAYOUT;
    }

    private static final long ai_socktype$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ai_socktype
     * }
     */
    public static final long ai_socktype$offset() {
        return ai_socktype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ai_socktype
     * }
     */
    public static int ai_socktype(MemorySegment struct) {
        return struct.get(ai_socktype$LAYOUT, ai_socktype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ai_socktype
     * }
     */
    public static void ai_socktype(MemorySegment struct, int fieldValue) {
        struct.set(ai_socktype$LAYOUT, ai_socktype$OFFSET, fieldValue);
    }

    private static final OfInt ai_protocol$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ai_protocol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ai_protocol
     * }
     */
    public static final OfInt ai_protocol$layout() {
        return ai_protocol$LAYOUT;
    }

    private static final long ai_protocol$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ai_protocol
     * }
     */
    public static final long ai_protocol$offset() {
        return ai_protocol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ai_protocol
     * }
     */
    public static int ai_protocol(MemorySegment struct) {
        return struct.get(ai_protocol$LAYOUT, ai_protocol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ai_protocol
     * }
     */
    public static void ai_protocol(MemorySegment struct, int fieldValue) {
        struct.set(ai_protocol$LAYOUT, ai_protocol$OFFSET, fieldValue);
    }

    private static final OfInt ai_addrlen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ai_addrlen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * socklen_t ai_addrlen
     * }
     */
    public static final OfInt ai_addrlen$layout() {
        return ai_addrlen$LAYOUT;
    }

    private static final long ai_addrlen$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * socklen_t ai_addrlen
     * }
     */
    public static final long ai_addrlen$offset() {
        return ai_addrlen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * socklen_t ai_addrlen
     * }
     */
    public static int ai_addrlen(MemorySegment struct) {
        return struct.get(ai_addrlen$LAYOUT, ai_addrlen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * socklen_t ai_addrlen
     * }
     */
    public static void ai_addrlen(MemorySegment struct, int fieldValue) {
        struct.set(ai_addrlen$LAYOUT, ai_addrlen$OFFSET, fieldValue);
    }

    private static final AddressLayout ai_addr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ai_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sockaddr *ai_addr
     * }
     */
    public static final AddressLayout ai_addr$layout() {
        return ai_addr$LAYOUT;
    }

    private static final long ai_addr$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sockaddr *ai_addr
     * }
     */
    public static final long ai_addr$offset() {
        return ai_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sockaddr *ai_addr
     * }
     */
    public static MemorySegment ai_addr(MemorySegment struct) {
        return struct.get(ai_addr$LAYOUT, ai_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sockaddr *ai_addr
     * }
     */
    public static void ai_addr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ai_addr$LAYOUT, ai_addr$OFFSET, fieldValue);
    }

    private static final AddressLayout ai_canonname$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ai_canonname"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *ai_canonname
     * }
     */
    public static final AddressLayout ai_canonname$layout() {
        return ai_canonname$LAYOUT;
    }

    private static final long ai_canonname$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *ai_canonname
     * }
     */
    public static final long ai_canonname$offset() {
        return ai_canonname$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *ai_canonname
     * }
     */
    public static MemorySegment ai_canonname(MemorySegment struct) {
        return struct.get(ai_canonname$LAYOUT, ai_canonname$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *ai_canonname
     * }
     */
    public static void ai_canonname(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ai_canonname$LAYOUT, ai_canonname$OFFSET, fieldValue);
    }

    private static final AddressLayout ai_next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ai_next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct addrinfo *ai_next
     * }
     */
    public static final AddressLayout ai_next$layout() {
        return ai_next$LAYOUT;
    }

    private static final long ai_next$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct addrinfo *ai_next
     * }
     */
    public static final long ai_next$offset() {
        return ai_next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct addrinfo *ai_next
     * }
     */
    public static MemorySegment ai_next(MemorySegment struct) {
        return struct.get(ai_next$LAYOUT, ai_next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct addrinfo *ai_next
     * }
     */
    public static void ai_next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ai_next$LAYOUT, ai_next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

