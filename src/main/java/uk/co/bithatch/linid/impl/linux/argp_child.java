// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct argp_child {
 *     const struct argp *argp;
 *     int flags;
 *     const char *header;
 *     int group;
 * }
 * }
 */
public class argp_child {

    argp_child() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_POINTER.withName("argp"),
        nss_proto_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        nss_proto_h.C_POINTER.withName("header"),
        nss_proto_h.C_INT.withName("group"),
        MemoryLayout.paddingLayout(4)
    ).withName("argp_child");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout argp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("argp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct argp *argp
     * }
     */
    public static final AddressLayout argp$layout() {
        return argp$LAYOUT;
    }

    private static final long argp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct argp *argp
     * }
     */
    public static final long argp$offset() {
        return argp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct argp *argp
     * }
     */
    public static MemorySegment argp(MemorySegment struct) {
        return struct.get(argp$LAYOUT, argp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct argp *argp
     * }
     */
    public static void argp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(argp$LAYOUT, argp$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout header$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *header
     * }
     */
    public static final AddressLayout header$layout() {
        return header$LAYOUT;
    }

    private static final long header$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *header
     * }
     */
    public static final long header$offset() {
        return header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *header
     * }
     */
    public static MemorySegment header(MemorySegment struct) {
        return struct.get(header$LAYOUT, header$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *header
     * }
     */
    public static void header(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(header$LAYOUT, header$OFFSET, fieldValue);
    }

    private static final OfInt group$LAYOUT = (OfInt)$LAYOUT.select(groupElement("group"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int group
     * }
     */
    public static final OfInt group$layout() {
        return group$LAYOUT;
    }

    private static final long group$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int group
     * }
     */
    public static final long group$offset() {
        return group$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int group
     * }
     */
    public static int group(MemorySegment struct) {
        return struct.get(group$LAYOUT, group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int group
     * }
     */
    public static void group(MemorySegment struct, int fieldValue) {
        struct.set(group$LAYOUT, group$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

