/*
 * Copyright © 2025 Bithatch (tanktarta@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the “Software”), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct passwd {
 *     char *pw_name;
 *     char *pw_passwd;
 *     __uid_t pw_uid;
 *     __gid_t pw_gid;
 *     char *pw_gecos;
 *     char *pw_dir;
 *     char *pw_shell;
 * }
 * }
 */
public class passwd {

    passwd() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_POINTER.withName("pw_name"),
        nss_proto_h.C_POINTER.withName("pw_passwd"),
        nss_proto_h.C_INT.withName("pw_uid"),
        nss_proto_h.C_INT.withName("pw_gid"),
        nss_proto_h.C_POINTER.withName("pw_gecos"),
        nss_proto_h.C_POINTER.withName("pw_dir"),
        nss_proto_h.C_POINTER.withName("pw_shell")
    ).withName("passwd");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pw_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pw_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *pw_name
     * }
     */
    public static final AddressLayout pw_name$layout() {
        return pw_name$LAYOUT;
    }

    private static final long pw_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *pw_name
     * }
     */
    public static final long pw_name$offset() {
        return pw_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *pw_name
     * }
     */
    public static MemorySegment pw_name(MemorySegment struct) {
        return struct.get(pw_name$LAYOUT, pw_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *pw_name
     * }
     */
    public static void pw_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pw_name$LAYOUT, pw_name$OFFSET, fieldValue);
    }

    private static final AddressLayout pw_passwd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pw_passwd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *pw_passwd
     * }
     */
    public static final AddressLayout pw_passwd$layout() {
        return pw_passwd$LAYOUT;
    }

    private static final long pw_passwd$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *pw_passwd
     * }
     */
    public static final long pw_passwd$offset() {
        return pw_passwd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *pw_passwd
     * }
     */
    public static MemorySegment pw_passwd(MemorySegment struct) {
        return struct.get(pw_passwd$LAYOUT, pw_passwd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *pw_passwd
     * }
     */
    public static void pw_passwd(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pw_passwd$LAYOUT, pw_passwd$OFFSET, fieldValue);
    }

    private static final OfInt pw_uid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pw_uid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __uid_t pw_uid
     * }
     */
    public static final OfInt pw_uid$layout() {
        return pw_uid$LAYOUT;
    }

    private static final long pw_uid$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __uid_t pw_uid
     * }
     */
    public static final long pw_uid$offset() {
        return pw_uid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __uid_t pw_uid
     * }
     */
    public static int pw_uid(MemorySegment struct) {
        return struct.get(pw_uid$LAYOUT, pw_uid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __uid_t pw_uid
     * }
     */
    public static void pw_uid(MemorySegment struct, int fieldValue) {
        struct.set(pw_uid$LAYOUT, pw_uid$OFFSET, fieldValue);
    }

    private static final OfInt pw_gid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pw_gid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * __gid_t pw_gid
     * }
     */
    public static final OfInt pw_gid$layout() {
        return pw_gid$LAYOUT;
    }

    private static final long pw_gid$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * __gid_t pw_gid
     * }
     */
    public static final long pw_gid$offset() {
        return pw_gid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * __gid_t pw_gid
     * }
     */
    public static int pw_gid(MemorySegment struct) {
        return struct.get(pw_gid$LAYOUT, pw_gid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * __gid_t pw_gid
     * }
     */
    public static void pw_gid(MemorySegment struct, int fieldValue) {
        struct.set(pw_gid$LAYOUT, pw_gid$OFFSET, fieldValue);
    }

    private static final AddressLayout pw_gecos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pw_gecos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *pw_gecos
     * }
     */
    public static final AddressLayout pw_gecos$layout() {
        return pw_gecos$LAYOUT;
    }

    private static final long pw_gecos$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *pw_gecos
     * }
     */
    public static final long pw_gecos$offset() {
        return pw_gecos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *pw_gecos
     * }
     */
    public static MemorySegment pw_gecos(MemorySegment struct) {
        return struct.get(pw_gecos$LAYOUT, pw_gecos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *pw_gecos
     * }
     */
    public static void pw_gecos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pw_gecos$LAYOUT, pw_gecos$OFFSET, fieldValue);
    }

    private static final AddressLayout pw_dir$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pw_dir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *pw_dir
     * }
     */
    public static final AddressLayout pw_dir$layout() {
        return pw_dir$LAYOUT;
    }

    private static final long pw_dir$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *pw_dir
     * }
     */
    public static final long pw_dir$offset() {
        return pw_dir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *pw_dir
     * }
     */
    public static MemorySegment pw_dir(MemorySegment struct) {
        return struct.get(pw_dir$LAYOUT, pw_dir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *pw_dir
     * }
     */
    public static void pw_dir(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pw_dir$LAYOUT, pw_dir$OFFSET, fieldValue);
    }

    private static final AddressLayout pw_shell$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pw_shell"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *pw_shell
     * }
     */
    public static final AddressLayout pw_shell$layout() {
        return pw_shell$LAYOUT;
    }

    private static final long pw_shell$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *pw_shell
     * }
     */
    public static final long pw_shell$offset() {
        return pw_shell$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *pw_shell
     * }
     */
    public static MemorySegment pw_shell(MemorySegment struct) {
        return struct.get(pw_shell$LAYOUT, pw_shell$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *pw_shell
     * }
     */
    public static void pw_shell(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pw_shell$LAYOUT, pw_shell$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

