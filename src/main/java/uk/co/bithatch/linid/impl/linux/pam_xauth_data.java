// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct pam_xauth_data {
 *     int namelen;
 *     char *name;
 *     int datalen;
 *     char *data;
 * }
 * }
 */
public class pam_xauth_data {

    pam_xauth_data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        nss_proto_h.C_INT.withName("namelen"),
        MemoryLayout.paddingLayout(4),
        nss_proto_h.C_POINTER.withName("name"),
        nss_proto_h.C_INT.withName("datalen"),
        MemoryLayout.paddingLayout(4),
        nss_proto_h.C_POINTER.withName("data")
    ).withName("pam_xauth_data");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt namelen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("namelen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int namelen
     * }
     */
    public static final OfInt namelen$layout() {
        return namelen$LAYOUT;
    }

    private static final long namelen$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int namelen
     * }
     */
    public static final long namelen$offset() {
        return namelen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int namelen
     * }
     */
    public static int namelen(MemorySegment struct) {
        return struct.get(namelen$LAYOUT, namelen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int namelen
     * }
     */
    public static void namelen(MemorySegment struct, int fieldValue) {
        struct.set(namelen$LAYOUT, namelen$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt datalen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("datalen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int datalen
     * }
     */
    public static final OfInt datalen$layout() {
        return datalen$LAYOUT;
    }

    private static final long datalen$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int datalen
     * }
     */
    public static final long datalen$offset() {
        return datalen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int datalen
     * }
     */
    public static int datalen(MemorySegment struct) {
        return struct.get(datalen$LAYOUT, datalen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int datalen
     * }
     */
    public static void datalen(MemorySegment struct, int fieldValue) {
        struct.set(datalen$LAYOUT, datalen$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

