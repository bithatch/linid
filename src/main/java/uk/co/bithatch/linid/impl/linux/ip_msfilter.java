/*
 * Copyright © 2025 Bithatch (tanktarta@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the “Software”), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify,
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// Generated by jextract

package uk.co.bithatch.linid.impl.linux;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ip_msfilter {
 *     struct in_addr imsf_multiaddr;
 *     struct in_addr imsf_interface;
 *     uint32_t imsf_fmode;
 *     uint32_t imsf_numsrc;
 *     struct in_addr imsf_slist[1];
 * }
 * }
 */
public class ip_msfilter {

    ip_msfilter() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        in_addr.layout().withName("imsf_multiaddr"),
        in_addr.layout().withName("imsf_interface"),
        nss_proto_h.C_INT.withName("imsf_fmode"),
        nss_proto_h.C_INT.withName("imsf_numsrc"),
        MemoryLayout.sequenceLayout(1, in_addr.layout()).withName("imsf_slist")
    ).withName("ip_msfilter");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout imsf_multiaddr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("imsf_multiaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct in_addr imsf_multiaddr
     * }
     */
    public static final GroupLayout imsf_multiaddr$layout() {
        return imsf_multiaddr$LAYOUT;
    }

    private static final long imsf_multiaddr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct in_addr imsf_multiaddr
     * }
     */
    public static final long imsf_multiaddr$offset() {
        return imsf_multiaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_multiaddr
     * }
     */
    public static MemorySegment imsf_multiaddr(MemorySegment struct) {
        return struct.asSlice(imsf_multiaddr$OFFSET, imsf_multiaddr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_multiaddr
     * }
     */
    public static void imsf_multiaddr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, imsf_multiaddr$OFFSET, imsf_multiaddr$LAYOUT.byteSize());
    }

    private static final GroupLayout imsf_interface$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("imsf_interface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct in_addr imsf_interface
     * }
     */
    public static final GroupLayout imsf_interface$layout() {
        return imsf_interface$LAYOUT;
    }

    private static final long imsf_interface$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct in_addr imsf_interface
     * }
     */
    public static final long imsf_interface$offset() {
        return imsf_interface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_interface
     * }
     */
    public static MemorySegment imsf_interface(MemorySegment struct) {
        return struct.asSlice(imsf_interface$OFFSET, imsf_interface$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_interface
     * }
     */
    public static void imsf_interface(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, imsf_interface$OFFSET, imsf_interface$LAYOUT.byteSize());
    }

    private static final OfInt imsf_fmode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imsf_fmode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imsf_fmode
     * }
     */
    public static final OfInt imsf_fmode$layout() {
        return imsf_fmode$LAYOUT;
    }

    private static final long imsf_fmode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imsf_fmode
     * }
     */
    public static final long imsf_fmode$offset() {
        return imsf_fmode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imsf_fmode
     * }
     */
    public static int imsf_fmode(MemorySegment struct) {
        return struct.get(imsf_fmode$LAYOUT, imsf_fmode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imsf_fmode
     * }
     */
    public static void imsf_fmode(MemorySegment struct, int fieldValue) {
        struct.set(imsf_fmode$LAYOUT, imsf_fmode$OFFSET, fieldValue);
    }

    private static final OfInt imsf_numsrc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imsf_numsrc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imsf_numsrc
     * }
     */
    public static final OfInt imsf_numsrc$layout() {
        return imsf_numsrc$LAYOUT;
    }

    private static final long imsf_numsrc$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imsf_numsrc
     * }
     */
    public static final long imsf_numsrc$offset() {
        return imsf_numsrc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imsf_numsrc
     * }
     */
    public static int imsf_numsrc(MemorySegment struct) {
        return struct.get(imsf_numsrc$LAYOUT, imsf_numsrc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imsf_numsrc
     * }
     */
    public static void imsf_numsrc(MemorySegment struct, int fieldValue) {
        struct.set(imsf_numsrc$LAYOUT, imsf_numsrc$OFFSET, fieldValue);
    }

    private static final SequenceLayout imsf_slist$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("imsf_slist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static final SequenceLayout imsf_slist$layout() {
        return imsf_slist$LAYOUT;
    }

    private static final long imsf_slist$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static final long imsf_slist$offset() {
        return imsf_slist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static MemorySegment imsf_slist(MemorySegment struct) {
        return struct.asSlice(imsf_slist$OFFSET, imsf_slist$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static void imsf_slist(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, imsf_slist$OFFSET, imsf_slist$LAYOUT.byteSize());
    }

    private static long[] imsf_slist$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static long[] imsf_slist$dimensions() {
        return imsf_slist$DIMS;
    }
    private static final MethodHandle imsf_slist$ELEM_HANDLE = imsf_slist$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static MemorySegment imsf_slist(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)imsf_slist$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct in_addr imsf_slist[1]
     * }
     */
    public static void imsf_slist(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, imsf_slist(struct, index0), 0L, in_addr.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

